# -*- coding: utf-8 -*-
"""Evidencia3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x5hAByVVyNK8YWwNgjz4OeSiq1fyyOSw
"""

#IMPORTACIONES
from ast import Try   
import datetime 
from datetime import time, timedelta
import csv 
from collections import namedtuple
import sys
import sqlite3
from sqlite3 import Error
!pip install XlsxWriter
import xlsxwriter
from xlsxwriter import Workbook


#********************************************************************************


#REGISTRAR NUEVO CLIENTE (opcion d)
def registrar_cliente():
    print(SEPARADOR)
    print("****** REGISTRAR UN NUEVO CLIENTE *****")
    while True:
        nombre_cliente=input("Ingresa el nombre del cliente (Deja en blanco para finalizar): \n")
        if nombre_cliente=="":
            break
        else:
            try:
                with sqlite3.connect("COWORKING.db",detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
                    mi_cursor = conn.cursor()
                    mi_cursor.execute("CREATE TABLE IF NOT EXISTS CLIENTE(CLAVE INTEGER PRIMARY KEY,NOMBRE TEXT NOT NULL);")
                    mi_cursor.execute("SELECT MAX(CLAVE) FROM CLIENTE")
                    clave=mi_cursor.fetchall()
                    clave=clave[0][0]
                    if clave:
                        clave+=1
                    else:
                        clave=1
                    valores_cliente=(clave,nombre_cliente)   
                    mi_cursor.execute("INSERT INTO CLIENTE VALUES(?,?)",valores_cliente)
                    print(f"Registro agregado con éxito la clave del cliente {nombre_cliente} es: {clave}")
            except Error as e:
                print (e)
            except:
                print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")



#********************************************************************************


#REGISTRAR NUEVA SALA (opcion c)
def registrar_sala():
    print(SEPARADOR)
    print("***** REGISTRO DE UNA NUEVA SALA *****")
    while True:
        nombre_sala=input("Ingresa el nombre de la sala. (Deja en blanco para finalizar): \n")
        if nombre_sala=="":
            break
        else:
            cupo_sala=int(input("Ingresa el cupo de la sala: \n"))
            if cupo_sala == 0:
                print("El cupo no puede ser 0.")
                break
            else:
                try:
                    with sqlite3.connect("COWORKING.db",detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
                        mi_cursor = conn.cursor()
                        mi_cursor.execute("CREATE TABLE IF NOT EXISTS SALA(CLAVE INTEGER PRIMARY KEY,NOMBRE TEXT NOT NULL, CUPO INTEGER NOT NULL);")
                        mi_cursor.execute("SELECT MAX(CLAVE) FROM SALA")
                        clave=mi_cursor.fetchall()
                        clave=clave[0][0]
                        if clave:
                            clave+=1
                        else:
                            clave=1
                        valores_sala=(clave,nombre_sala,cupo_sala)
                        mi_cursor.execute("INSERT INTO SALA VALUES(?,?,?)",valores_sala)
                        print(f"Registro agregado con éxito el id de la sala es: {clave}")
                except Error as e:
                    print (e)
                except:
                    print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")



#********************************************************************************
turnos={1:"MATUTINO", 2:"VESPERTINO", 3:"NOCTURNO"}
    
#REGISTRAR NUEVA RESERVACION (opcion a, numero 1)
def reservar_sala():
    print(SEPARADOR)
    print("***** RESERVACION DE UNA SALA *****")
    global Reservaciones
    excepciones=0
    ingresa_id_cliente=int(input("Ingresa el id de cliente: \n"))
    ingresa_id_sala=int(input("Ingresa el id de la sala: \n"))
    fecha_evento=input("Ingresa la fecha del evento: \n")
    fecha_procesada= datetime.datetime.strptime(fecha_evento, "%d/%m/%Y").date()
    fecha_actual = datetime.date.today()
    fecha_permitida= fecha_procesada-timedelta(days=2)
    evento=input("Ingresa el nombre del evento: \n")
    reservacion_turno= int(input("Ingresa la clave del turno [1][2][3]: \n"))
    if reservacion_turno==1:
        reservacion_turno=turnos[1]
    if reservacion_turno==2:
        reservacion_turno=turnos[2]
    if reservacion_turno==3:
        reservacion_turno=turnos[3]
    if reservacion_turno=="MATUTINO" or reservacion_turno=="VESPERTINO" or reservacion_turno=="NOCTURNO":
        if fecha_actual<=fecha_permitida:
            try:
                with sqlite3.connect("COWORKING.db",detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
                    mi_cursor = conn.cursor()
                    valores_cliente={"CLAVE_CLIENTE":ingresa_id_cliente}
                    mi_cursor.execute("SELECT CLAVE FROM CLIENTE WHERE CLAVE = :CLAVE_CLIENTE",valores_cliente)
                    registros_cliente= mi_cursor.fetchall()
                    if registros_cliente:
                        valores_sala={"CLAVE_SALA":ingresa_id_sala}
                        mi_cursor.execute("SELECT CLAVE FROM  SALA WHERE CLAVE = :CLAVE_SALA",valores_sala)
                        registros_sala= mi_cursor.fetchall()
                        if registros_sala:
                            mi_cursor.execute("CREATE TABLE IF NOT EXISTS RESERVACION(CLAVE INTEGER PRIMARY KEY,NOMBRE_EVENTO TEXT NOT NULL,ID_SALA INTEGER NOT NULL,CLAVE_CLIENTE INTEGER NOT NULL,TURNO TEXT NOT NULL,FECHA timestamp,FOREIGN KEY (CLAVE_CLIENTE) REFERENCES CLIENTE(CLAVE),FOREIGN KEY (ID_SALA) REFERENCES SALA(CLAVE));")
                            criterios={"FECHA_EXC":fecha_procesada,"TURNO_EXC":reservacion_turno,"SALA_EXC":ingresa_id_cliente}
                            mi_cursor.execute("SELECT * FROM RESERVACION WHERE DATE(FECHA)=:FECHA_EXC AND TURNO=:TURNO_EXC AND ID_SALA=:SALA_EXC;",criterios)
                            excepciones = mi_cursor.fetchall()
                            if excepciones:
                                print("NO SE PUEDE REGISTRAR EL MISMO TURNO PARA LA MISMA SALA")
                            else:
                                mi_cursor = conn.cursor()
                                mi_cursor.execute("SELECT MAX(CLAVE) FROM RESERVACION")
                                clave=mi_cursor.fetchall()
                                clave=clave[0][0]
                                if clave:
                                    clave+=1
                                else:
                                    clave=1
                                valores_reservaciones=(clave,evento,ingresa_id_sala,ingresa_id_cliente,reservacion_turno,fecha_procesada)
                                mi_cursor.execute("INSERT INTO RESERVACION VALUES(?,?,?,?,?,?)",valores_reservaciones)
                                print(f"Reservacion realizada con éxito, cliente: {ingresa_id_cliente},reservacion:{clave}")
                        else:
                            print("No existe el ID de la sala.")
                    else:
                        print("No existe el ID del cliente.")
            except Error as e:
                print (e)
            except Exception:
                print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")




#CAMBIAR DESCRIPCION DEL EVENTO (opcion a, numero 2)
def modificar_descripcion():
    print(SEPARADOR)
    print("***** CAMBIAR DESCRIPCION DEL EVENTO *****")
    while True:
        folio_buscar=input("Introduce el folio de la reservacion: \n")
        if folio_buscar=="":
            print("Saliendo...")
            break
        else:
            nuevo_nombre=input("Introduce el nuevo nombre del evento: \n")
            try:
                with sqlite3.connect("COWORKING.db", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
                    mi_cursor=conn.cursor()
                    criterios={"ID":folio_buscar,"NOMBRE":nuevo_nombre}
                    mi_cursor.execute("UPDATE RESERVACION SET NOMBRE_EVENTO=:NOMBRE WHERE CLAVE=:ID;",criterios)
                    print("Se editó el nombre del evento con éxito.")
            except sqlite3.Error as e:
                print (e)
            except Exception:
                print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")

    


#CONSULTAR DISPONIBILIDAD DE SALAS PARA UNA FECHA (opcion a, numero 3)
def consultar_disponibilidad():
    print(SEPARADOR)
    print("***** CONSULTAR DISPONIBILIDAD DE LAS SALAS *****")
    fecha_consulta=input("Ingresa la fecha a consultar: \n")
    fecha_consulta= datetime.datetime.strptime(fecha_consulta, "%d/%m/%Y").date()
    try:
        with sqlite3.connect("COWORKING.db", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
            mi_cursor = conn.cursor()
            criterio={"FECHA":fecha_consulta}
            mi_cursor.execute("SELECT S.NOMBRE,R.TURNO FROM RESERVACION R, SALA S WHERE R.ID_SALA=S.CLAVE AND FECHA=:FECHA",criterio)
            registros = mi_cursor.fetchall()
            no_disponibles=[]
            for sala,turno in registros:
                no_disponibles.append((sala,turno))
            no_disponibles=set(no_disponibles)
            print(no_disponibles)
            if no_disponibles:
                posibles=[]
                mi_cursor = conn.cursor()
                mi_cursor.execute("SELECT NOMBRE FROM SALA")
                salas = mi_cursor.fetchall()
                for sala in salas:
                    for valor in turnos.values():
                        posibles.append((sala,valor))
                posibles=set(posibles)
                print(posibles)
                turnos_disponibles = sorted(list(posibles - no_disponibles))
                print(turnos_disponibles)
    except sqlite3.Error as e:
        print (e)
    except Exception:
        print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")  

    

#ELIMINAR UNA RESERVACION (opcion a, numero 4)
def eliminar_reservacion():
    print("***** ELIMINAR UNA RESERVACION *****")
    folio_busq=int(input('Ingrese el folio de la reservación a eliminar: \n'))
    valor_folio={"ID":folio_busq}
    try:
        with sqlite3.connect("COWORKING.db", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
            mi_cursor=conn.cursor()           
            mi_cursor.execute("SELECT date(FECHA) FROM RESERVACION WHERE CLAVE=:ID",valor_folio)
            fecha=mi_cursor.fetchone()
            if fecha:
                fecha=fecha[0]
                fecha=datetime.strptime(fecha, "%Y-%m-%d").date()
                actual=datetime.now().date()
                diferencia=fecha-actual
                diferencia=diferencia.days
                if diferencia>=3:
                    res=input('¿Desea eliminar esta reservacion? Este procedimiento no puede ser deshecho  [S/N]')
                    res=res.upper()
                    if res=='S':
                        mi_cursor=conn.cursor()
                        mi_cursor.execute("DELETE FROM RESERVACION WHERE CLAVE=:ID",valor_folio)
                        print('Registro eliminado exitosamente')
                    else:
                        if res=='N':
                            print('La reservacion no se borrara, gracias por su confirmacion.')
                else:
                    print('Para eliminar una reservacion debe hacerse con 3 dias de anticipacion')
            else:
                 print("Folio no encontrado")
    except Error as e:
        print (e)
    except:
        print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")                         
            



#********************************************************************************


#MOSTRAR RESERVACIONES PARA UNA FECHA (opcion b, numero 1)
def reporte_reservaciones():
    print(SEPARADOR)
    print("***** REPORTE EN PANTALLA DE RESERVACIONES PARA UNA FECHA *****")
    fecha_consulta=input("Ingresa la fecha del evento: \n")
    fecha_consulta= datetime.datetime.strptime(fecha_consulta, "%d/%m/%Y").date() 
    print("\n" + "*"*77)
    print("**" + " "*13 + f"REPORTE DE RESERVACIONES PARA EL DÍA {fecha_consulta}" + " "*13 + "**")
    print("*"*77)
    print("{:<6} {:<20} {:<38} {:<13}".format('SALA','CLIENTE','EVENTO', 'TURNO'))
    print("*"*77)
    try:
        with sqlite3.connect("COWORKING.db", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
            mi_cursor = conn.cursor()
            criterio={"FECHA":fecha_consulta}
            mi_cursor.execute("SELECT R.ID_SALA,C.NOMBRE,R.NOMBRE_EVENTO,R.TURNO FROM RESERVACION R,CLIENTE C WHERE R.CLAVE_CLIENTE=C.CLAVE AND DATE(R.FECHA)=:FECHA;",criterio)
            registros = mi_cursor.fetchall()
            if registros:
                for id_sala,nombre_cliente,evento,turno in registros:
                    print("{:<6} {:<20} {:<38} {:<13}".format(id_sala,nombre_cliente,evento,turno))
                print("*"*30 + " FIN DEL REPORTE " + "*"*30)
    except sqlite3.Error as e:
        print (e)
    except Exception:
        print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")
                



#EXPORTAR REPORTE TABULAR EN EXCEL (opcion b, numero 2)
def exportar_excel():
    print("***** EXPORTACION A EXCEL *****")
    fecha_consulta=input("Ingresa la fecha del evento: \n")
    fecha_consulta= datetime.datetime.strptime(fecha_consulta, "%d/%m/%Y").date()
    try:
        with sqlite3.connect("COWORKING.db", detect_types = sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES) as conn:
            cursor = conn.cursor()
            criterio={"FECHA":fecha_consulta}
            cursor.execute("SELECT R.ID_SALA,C.NOMBRE,R.NOMBRE_EVENTO,R.TURNO FROM RESERVACION R,CLIENTE C WHERE R.CLAVE_CLIENTE=C.CLAVE AND DATE(R.FECHA)=:FECHA;",criterio)
            if cursor:
                workbook = xlsxwriter.Workbook(f'Reporte_Reservacion {fecha_consulta}.xlsx')
                worksheet = workbook.add_worksheet()
                bold = workbook.add_format({'bold': True})
                worksheet.write('A1',f'Reporte de reservacion del: {fecha_consulta}',bold)
                worksheet.write('A2', 'SALA', bold)
                worksheet.write('B2', 'CLIENTE', bold)
                worksheet.write('C2', 'EVENTO', bold)
                worksheet.write('D2', 'TURNO', bold)
                col_num=2
                for valores in cursor:
                    worksheet.write_row(col_num,0, valores)
                    col_num+= 1
                workbook.close()
                print("Reporte generado con éxito.")
            else:
                print("No existen reservaciones para esa fecha.")
    except sqlite3.Error as e:
        print (e)
    except Exception:
        print(f"Se produjo el siguiente error: {sys.exc_info()[0]}")            

#********************************************************************************


def volver_menu():
  print(SEPARADOR)
  print("Volviendo al menú principal.")

#MENÚ
SEPARADOR = ("𝄗" * 60) + "\n"

while True:
    print(SEPARADOR)
    print("******* MENÚ PRINCIPAL *******")
    print("\t[A] RESERVACIONES")
    print("\t[B] REPORTES")
    print("\t[C] REGISTRAR UNA SALA")
    print("\t[D] REGISTRAR A UN CLIENTE")
    print("\t[E] SALIR")

    try:
        opcion=input("\n¿Qué desea hacer? ")
        opcion=opcion.lower()
        if opcion=="a":
              print(SEPARADOR)
              print("******* RESERVACIONES *******")
              print("\t[1] REGISTRAR NUEVA RESERVACION")
              print("\t[2] MODIFICAR DESCRIPCION DE UNA RESERVACION")
              print("\t[3] CONSULTAR DISPONIBILIDAD DE SALAS PARA UNA FECHA")
              print("\t[4] ELIMINAR UNA RESERVACION")
              print("\t[5] VOLVER AL MENU PRINCIPAL")
              opcion_a=int(input("\nElige una opcion: "))
              if opcion_a==1:
                reservar_sala()
              elif opcion_a==2:
                modificar_descripcion()
              elif opcion_a==3:
                consultar_disponibilidad()
              elif opcion_a==4:
                eliminar_reservacion()
              elif opcion_a==5:
                volver_menu()

        if  opcion=="b":
              print(SEPARADOR)
              print("******* REPORTES *******")
              print("\t[1] REPORTE EN PANTALLA DE RESERVACIONES PARA UNA FECHA")
              print("\t[2] EXPORTAR REPORTE TABULAR EN EXCEL")
              print("\t[3] VOLVER AL MENU PRINCIPAL")
              opcion_b=int(input("\nElige una opción: "))                
              if opcion_b==1:
                reporte_reservaciones()
              elif opcion_b==2:
                exportar_excel()
              elif opcion_b==3:
                volver_menu()
        if opcion=="c":
           registrar_sala()
            
        if opcion=="d":
           registrar_cliente()
        if opcion=="e":
            print("Saliendo del programa...")
            break
    except:
        print("Ingresa una opción válida")

